#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>

#include "iec60870_slave.h"
#include "iec60870_master.h"
#include "iec60870_common.h"

#include "hal_thread.h"
#include "hal_time.h"

static bool running = true;

static ConnectionParameters connectionParameters;

void
sigint_handler(int signalId)
{
    running = false;
}

// void
// printCP56Time2a(CP56Time2a time)
// {
//     printf("%02i:%02i:%02i %02i/%02i/%04i", CP56Time2a_getHour(time),
//                              CP56Time2a_getMinute(time),
//                              CP56Time2a_getSecond(time),
//                              CP56Time2a_getDayOfMonth(time),
//                              CP56Time2a_getMonth(time) + 1,
//                              CP56Time2a_getYear(time) + 2000);
// }

// static bool
// clockSyncHandler (void* parameter, MasterConnection connection, ASDU asdu, CP56Time2a newTime)
// {
//     printf("Process time sync command with time "); printCP56Time2a(newTime); printf("\n");

//     return true;
// }

// static bool
// interrogationHandler(void* parameter, MasterConnection connection, ASDU asdu, uint8_t qoi)
// {
//     printf("Received interrogation for group %i\n", qoi);

//     struct sCP56Time2a timestamp;

//     CP56Time2a_createFromMsTimestamp(&timestamp, Hal_getTimeInMs());

//     MasterConnection_sendACT_CON(connection, asdu, false);

//     ASDU newAsdu = ASDU_create(connectionParameters, M_ME_NB_1, false, INTERROGATED_BY_STATION,
//             0, 1, false, false);

//     InformationObject io = (InformationObject) MeasuredValueScaled_create(NULL, 100, -1, IEC60870_QUALITY_GOOD);

//     ASDU_addInformationObject(newAsdu, io);

//     ASDU_addInformationObject(newAsdu, (InformationObject)
// 		MeasuredValueScaled_create((MeasuredValueScaled) io, 101, 23, IEC60870_QUALITY_GOOD));

//     ASDU_addInformationObject(newAsdu, (InformationObject)
// 		MeasuredValueScaled_create((MeasuredValueScaled) io, 102, 2300, IEC60870_QUALITY_GOOD));

//     InformationObject_destroy(io);

//     MasterConnection_sendASDU(connection, newAsdu);

//     newAsdu = ASDU_create(connectionParameters, M_SP_TB_1, false, INTERROGATED_BY_STATION,
//                 0, 1, false, false);

//     io = (InformationObject) SinglePointWithCP56Time2a_create(NULL, 104, true, IEC60870_QUALITY_GOOD, &timestamp);

//     ASDU_addInformationObject(newAsdu, io);

//     ASDU_addInformationObject(newAsdu, (InformationObject)
// 		SinglePointWithCP56Time2a_create((SinglePointWithCP56Time2a) io, 105, false, IEC60870_QUALITY_GOOD, &timestamp));

//     InformationObject_destroy(io);

//     MasterConnection_sendASDU(connection, newAsdu);


//     newAsdu = ASDU_create(connectionParameters, M_IT_TB_1, false, INTERROGATED_BY_STATION,
//                 0, 1, false, false);

//     BinaryCounterReading bcr = BinaryCounterReading_create(NULL, 12345678, 0, false, false, true);

//     io = (InformationObject) IntegratedTotalsWithCP56Time2a_create(NULL, 200, bcr, &timestamp);

//     ASDU_addInformationObject(newAsdu, io);

//     BinaryCounterReading_destroy(bcr);

//     InformationObject_destroy(io);

//     MasterConnection_sendASDU(connection, newAsdu);

//     newAsdu = ASDU_create(connectionParameters, M_SP_NA_1, true, INTERROGATED_BY_STATION,
//             0, 1, false, false);

//     ASDU_addInformationObject(newAsdu, io = (InformationObject) SinglePointInformation_create(NULL, 300, true, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 301, false, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 302, true, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 303, false, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 304, true, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 305, false, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 306, true, IEC60870_QUALITY_GOOD));
//     ASDU_addInformationObject(newAsdu, (InformationObject) SinglePointInformation_create((SinglePointInformation) io, 307, false, IEC60870_QUALITY_GOOD));

//     InformationObject_destroy(io);

//     MasterConnection_sendASDU(connection, newAsdu);

//     MasterConnection_sendACT_TERM(connection, asdu);

//     return true;
// }

static bool
asduHandler(void* parameter, MasterConnection connection, ASDU asdu)
{
    if (ASDU_getTypeID(asdu) == C_SC_NA_1) {
        printf("received single command\n");

        if  (ASDU_getCOT(asdu) == ACTIVATION) {
            InformationObject io = ASDU_getElement(asdu, 0);

            if (InformationObject_getObjectAddress(io) == 5000) {
                SingleCommand sc = (SingleCommand) io;

                printf("IOA: %i switch to %i\n", InformationObject_getObjectAddress(io),
                        SingleCommand_getState(sc));

                ASDU_setCOT(asdu, ACTIVATION_CON);
            }
            else
                ASDU_setCOT(asdu, UNKNOWN_INFORMATION_OBJECT_ADDRESS);

            InformationObject_destroy(io);
        }
        else
            ASDU_setCOT(asdu, UNKNOWN_CAUSE_OF_TRANSMISSION);

        MasterConnection_sendASDU(connection, asdu);

        return true;
    }

    return false;
}

static bool
connectionRequestHandler(void* parameter, const char* ipAddress)
{
    printf("New connection from %s\n", ipAddress);

#if 0
    if (strcmp(ipAddress, "127.0.0.1") == 0) {
        printf("Accept connection\n");
        return true;
    }
    else {
        printf("Deny connection\n");
        return false;
    }
#else
    return true;
#endif
}

static void
connectionHandlerClient (void* parameter, T104Connection connection, IEC60870ConnectionEvent event)
{
    switch (event) {
    case IEC60870_CONNECTION_OPENED:
        printf("Connection established\n");
        break;
    case IEC60870_CONNECTION_CLOSED:
        printf("Connection closed\n");
        break;
    case IEC60870_CONNECTION_STARTDT_CON_RECEIVED:
        printf("Received STARTDT_CON\n");
        break;
    case IEC60870_CONNECTION_STOPDT_CON_RECEIVED:
        printf("Received STOPDT_CON\n");
        break;
    }
}

static bool
asduReceivedHandlerClient (void* parameter, ASDU asdu)
{
    printf("RECVD ASDU type: %s(%i) elements: %i\n",
            TypeID_toString(ASDU_getTypeID(asdu)),
            ASDU_getTypeID(asdu),
            ASDU_getNumberOfElements(asdu));

    if (ASDU_getTypeID(asdu) == M_ME_TE_1) {

        printf("  measured scaled values with CP56Time2a timestamp:\n");

        int i;

        for (i = 0; i < ASDU_getNumberOfElements(asdu); i++) {

            MeasuredValueScaledWithCP56Time2a io =
                    (MeasuredValueScaledWithCP56Time2a) ASDU_getElement(asdu, i);

            printf("    IOA: %i value: %i\n",
                    InformationObject_getObjectAddress((InformationObject) io),
                    MeasuredValueScaled_getValue((MeasuredValueScaled) io)
            );

            MeasuredValueScaledWithCP56Time2a_destroy(io);
        }
    }
    else if (ASDU_getTypeID(asdu) == M_SP_NA_1) {
        printf("  single point information:\n");

        int i;

        for (i = 0; i < ASDU_getNumberOfElements(asdu); i++) {

            SinglePointInformation io =
                    (SinglePointInformation) ASDU_getElement(asdu, i);

            printf("    IOA: %i value: %i\n",
                    InformationObject_getObjectAddress((InformationObject) io),
                    SinglePointInformation_getValue((SinglePointInformation) io)
            );

            SinglePointInformation_destroy(io);
        }
    }

    return true;
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  FuzzMe(Data, Size);
  return 0;
}

int
main(int argc, char** argv)
{
    /* Add Ctrl-C handler */
    signal(SIGINT, sigint_handler);

    /* create a new slave/server instance with default connection parameters and
     * default message queue size */
    Slave slave = T104Slave_create(NULL, 100, 100);

    T104Slave_setLocalAddress(slave, "0.0.0.0");

    /* get the connection parameters - we need them to create correct ASDUs */
    connectionParameters = Slave_getConnectionParameters(slave);

    /* set the callback handler for the clock synchronization command */
    // Slave_setClockSyncHandler(slave, clockSyncHandler, NULL);

    /* set the callback handler for the interrogation command */
    // Slave_setInterrogationHandler(slave, interrogationHandler, NULL);

    /* set handler for other message types */
    Slave_setASDUHandler(slave, asduHandler, NULL);

    T104Slave_setConnectionRequestHandler(slave, connectionRequestHandler, NULL);

    Slave_start(slave);

    if (Slave_isRunning(slave) == false) {
        printf("Starting server failed!\n");
        goto exit_program;
    }


    //Send fuzzing input through tcp using T104 Client
    if (running) {

        T104Connection con = T104Connection_create("127.0.0.1", IEC_60870_5_104_DEFAULT_PORT);

        T104Connection_setConnectionHandler(con, connectionHandlerClient, NULL);
        T104Connection_setASDUReceivedHandler(con, asduReceivedHandlerClient, NULL);

        if (T104Connection_connect(con)) {
            printf("Connected!\n");

            T104Connection_sendStartDT(con);
            //T104Connection_sendGenericFuzzData(con);

            // Thread_sleep(5000);

            // T104Connection_sendInterrogationCommand(con, ACTIVATION, 1, IEC60870_QOI_STATION);

            // Thread_sleep(5000);

            // InformationObject sc = (InformationObject)
            //         SingleCommand_create(NULL, 5000, true, false, 0);

            // printf("Send control command C_SC_NA_1\n");
            // T104Connection_sendControlCommand(con, C_SC_NA_1, ACTIVATION, 1, sc);

            // InformationObject_destroy(sc);

            // /* Send clock synchronization command */
            // struct sCP56Time2a newTime;

            // CP56Time2a_setFromMsTimestamp(&newTime, Hal_getTimeInMs());

            // printf("Send time sync command\n");
            // T104Connection_sendClockSyncCommand(con, 1, &newTime);

            // Thread_sleep(1000);
        }
        else
            printf("Connect failed!\n");

        Thread_sleep(1000);

        T104Connection_destroy(con);

        printf("exit\n");
    }

    Slave_stop(slave);

exit_program:
    Slave_destroy(slave);

    Thread_sleep(500);
}